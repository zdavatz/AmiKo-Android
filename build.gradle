// This buildscript{} block configures the code driving the build
buildscript {
   /**
    * The nested repositories{} block declares that this build uses the
    * jcenter repository.
    */
    repositories {
        jcenter()
        google()
        maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
    }

   /**
    * This block declares a dependency on the 3.2.1 version
    * of the Gradle plugin for the buildscript.
    */
    dependencies {
        classpath 'com.android.tools.build:gradle:8.1.1'
    }
}

plugins {
  id "com.github.triplet.play" version "2.8.0"
  id "de.undercouch.download" version "5.5.0"
}

/**
 * This line applies the com.android.application plugin. Note that you should
 * only apply the com.android.application plugin. Applying the Java plugin as
 * well will result in a build error.
 */
apply plugin: 'com.android.application'
apply plugin: 'de.undercouch.download'
apply plugin: 'com.github.triplet.play'

/**
 * This dependencies block includes any dependencies for the project itself. The
 * following line includes all the JAR files in the libs directory.
 */
dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation 'androidx.legacy:legacy-support-v13:1.0.0-beta01'
    implementation 'org.jsoup:jsoup:1.11.3'
    implementation 'com.google.android.material:material:1.1.0'
    implementation 'com.google.android.gms:play-services-vision:18.0.0'
    implementation 'com.amitshekhar.android:android-networking:1.0.2'

    implementation 'com.google.api-client:google-api-client:1.30.9'
    implementation 'com.google.oauth-client:google-oauth-client:1.30.6'
    implementation 'com.google.apis:google-api-services-drive:v3-rev197-1.25.0'
}

/**
 * The android{} block configures all of the parameters for the Android build.
 * You must provide a value for at least the compilation target.
 */
android {
    namespace "com.ywesee.amiko"
    compileSdkVersion 31

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    /**
    * This nested sourceSets block points the source code directories to the
    * existing folders in the project, instead of using the default new
    * organization.
    */
    buildFeatures {
        buildConfig = true
    }
    defaultConfig {
        minSdkVersion 26
        targetSdkVersion 31

        buildConfigField "long", "TIMESTAMP", System.currentTimeMillis() + "L"
    }
    flavorDimensions "version"
    productFlavors {
        amiko {
            // Assigns this product flavor to the "version" flavor dimension.
            // This property is optional if you are using only one dimension.
            dimension "version"
            applicationIdSuffix ".de"
            versionNameSuffix "-de"

            def redirectScheme = "com.ywesee.amiko.de"
            buildConfigField "String", "OAUTH_REDIRECT_SCHEME", "\"" + redirectScheme + "\"";
            def hinRedirectScheme = "amiko";
            buildConfigField "String", "HIN_OAUTH_REDIRECT_SCHEME", "\"" + hinRedirectScheme + "\"";
            manifestPlaceholders = [oauthRedirectScheme: redirectScheme, hinOauthRedirectScheme: hinRedirectScheme]
        }
        comed {
            dimension "version"
            applicationIdSuffix ".fr"
            versionNameSuffix "-fr"

            def redirectScheme = "com.ywesee.amiko.fr"
            buildConfigField "String", "OAUTH_REDIRECT_SCHEME", "\"" + redirectScheme + "\"";
            def hinRedirectScheme = "comed";
            buildConfigField "String", "HIN_OAUTH_REDIRECT_SCHEME", "\"" + hinRedirectScheme + "\"";
            manifestPlaceholders = [oauthRedirectScheme: redirectScheme, hinOauthRedirectScheme: hinRedirectScheme]
        }
    }

    def amikoAssetDir = new File(projectDir, 'src/amiko/assets')
    task downloadAmikoDB(type: Download) {
        src "http://pillbox.oddb.org/amiko_db_full_idx_de.zip"
        dest new File(buildDir, 'amiko_db_full_idx_de.zip')
        overwrite true
        useETag true
    }
    task unzipAmikoDB(dependsOn: downloadAmikoDB, type: Copy) {
        from zipTree(downloadAmikoDB.dest)
        into amikoAssetDir
    }
    task downloadAmikoFrequencyDB(type: Download) {
        src "http://pillbox.oddb.org/amiko_frequency_de.db.zip"
        dest new File(buildDir, 'amiko_frequency_de.db.zip')
        overwrite true
        useETag true
    }
    task unzipAmikoFrequencyDB(dependsOn: downloadAmikoFrequencyDB, type: Copy) {
        from zipTree(downloadAmikoFrequencyDB.dest)
        into amikoAssetDir
    }
    task downloadAmikoInteractions(type: Download) {
        src "http://pillbox.oddb.org/drug_interactions_csv_de.zip"
        dest new File(buildDir, 'drug_interactions_csv_de.zip')
        overwrite true
        useETag true
    }
    task unzipAmikoInteractions(dependsOn: downloadAmikoInteractions, type: Copy) {
        from zipTree(downloadAmikoInteractions.dest)
        into amikoAssetDir
    }
    task downloadAmikoReport(type: Download) {
        src "http://pillbox.oddb.org/amiko_report_de.html"
        dest amikoAssetDir
    }
    def comedAssetDir = new File(projectDir, 'src/comed/assets')
    task downloadComedDB(type: Download) {
        src "http://pillbox.oddb.org/amiko_db_full_idx_fr.zip"
        dest new File(buildDir, 'amiko_db_full_idx_fr.zip')
        overwrite true
        useETag true
    }
    task unzipComedDB(dependsOn: downloadComedDB, type: Copy) {
        from zipTree(downloadComedDB.dest)
        into comedAssetDir
    }
    task downloadComedFrequencyDB(type: Download) {
        src "http://pillbox.oddb.org/amiko_frequency_fr.db.zip"
        dest new File(buildDir, 'amiko_frequency_fr.db.zip')
        overwrite true
        useETag true
    }
    task unzipComedFrequencyDB(dependsOn: downloadComedFrequencyDB, type: Copy) {
        from zipTree(downloadComedFrequencyDB.dest)
        into comedAssetDir
    }
    task downloadComedInteractions(type: Download) {
        src "http://pillbox.oddb.org/drug_interactions_csv_fr.zip"
        dest new File(buildDir, 'drug_interactions_csv_fr.zip')
        overwrite true
        useETag true
    }
    task unzipComedInteractions(dependsOn: downloadComedInteractions, type: Copy) {
        from zipTree(downloadComedInteractions.dest)
        into comedAssetDir
    }
    task downloadComedReport(type: Download) {
        src "http://pillbox.oddb.org/amiko_report_fr.html"
        dest comedAssetDir
    }

    tasks.whenTaskAdded { task ->
        if (task.name == "mergeAmikoDebugAssets" ||
            task.name == "mergeAmikoReleaseAssets" ||
            
            task.name == "generateAmikoDebugResources" ||
            task.name == "generateAmikoReleaseResources"
        ) {
           task.dependsOn unzipAmikoDB
           task.dependsOn unzipAmikoFrequencyDB
           task.dependsOn downloadAmikoReport
           task.dependsOn unzipAmikoInteractions
        } else if (task.name == "mergeComedDebugAssets" ||
            task.name == "mergeComedReleaseAssets" ||
            task.name == "generateComedDebugResources" ||
            task.name == "generateComedReleaseResources"
        ) {
           task.dependsOn unzipComedDB
           task.dependsOn unzipComedFrequencyDB
           task.dependsOn downloadComedReport
           task.dependsOn unzipComedInteractions
        }
    }

    tasks.whenTaskAdded { task ->
        if (task.name.startsWith("bundleComed")) {
            def renameTaskName = "rename${task.name.capitalize()}Aab"
            def deleteTaskName = "delete${task.name.capitalize()}Aab"
            def flavor = task.name.substring("bundle".length()).uncapitalize()
            tasks.create(renameTaskName, Copy) {
                def path = "${buildDir}/outputs/bundle/${flavor}/"
                from(path)
                include "AmiKo-Android.aab"
                destinationDir file("${buildDir}/outputs/bundle/${flavor}/")
                rename "AmiKo-Android.aab", "Comed-Android.aab"
            }

            tasks.create(deleteTaskName, Delete) {
                def bundlePath = rootProject.getProjectDir().getAbsolutePath() + "/${project.name}/build/outputs/bundle/${flavor}/"
                def baseName = getProperty("archivesBaseName")

                delete fileTree("${buildDir}/outputs/bundle/${flavor}/") {
                    include "AmiKo-Android.aab"
                }
            }

            task.finalizedBy(renameTaskName)
            task.finalizedBy(deleteTaskName)
        }
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/ASL2.0'
    }
}

repositories {
    google()
    jcenter()
}

android {

    signingConfigs {
        release
    }

    buildTypes {
            release {
                signingConfig signingConfigs.release
            }
    }
    compileOptions {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
    }
}

play {
    serviceAccountCredentials = file("amiko.json")
}

if (!project.hasProperty('isTest')) {
  def Properties props = new Properties()
  def propFile = new File('signing.properties')
  if (propFile.canRead()) {
    props.load(new FileInputStream(propFile))

    if (props!=null &&
      props.containsKey('STORE_FILE') &&
      props.containsKey('STORE_PASSWORD') &&
      props.containsKey('KEY_ALIAS') &&
      props.containsKey('KEY_PASSWORD')) {
      android.signingConfigs.release.storeFile = file(props['STORE_FILE'])
      android.signingConfigs.release.storePassword = props['STORE_PASSWORD']
      android.signingConfigs.release.keyAlias = props['KEY_ALIAS']
      android.signingConfigs.release.keyPassword = props['KEY_PASSWORD']
    } else {
      println 'signing.properties found but some entries are missing'
      android.buildTypes.release.signingConfig = null
    }
  } else {
    println 'signing.properties not found'
    android.buildTypes.release.signingConfig = null
  }
}
